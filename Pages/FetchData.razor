@page "/fetchdata"
@using PetShopMetrics.Models
@using System.Text.Json
@using System.Text.Json.Serialization
@using ChartJs.Blazor.PieChart
@using System.Drawing
@inject MonitoringAPIClient API

<h1>Merchandise Filter</h1>

<p>This component demonstrates fetching data from a service.</p>
<p>
    Filter by category
    <select class="bold backgroundLightBlue" @onchange="@GetMerchandiseByCategory">
        <option class="bold" value="0">Select a Category</option>
        @if (categories != null)
        {
            @foreach (var c in categories)
            {
                <option class="bold" value=@c>@c</option>
            }
        }
    </select>
</p>
<p>
    Filter by Month
    <select class="bold backgroundLightBlue" @onchange="@GetMerchandiseByMonth">
        <option class="bold" value="0">Select a Month</option>
        <option class="bold" value=1>1</option>
        <option class="bold" value=2>2</option>
        <option class="bold" value=3>3</option>
        <option class="bold" value=4>4</option>
        <option class="bold" value=5>5</option>
        <option class="bold" value=6>6</option>
        <option class="bold" value=7>7</option>
        <option class="bold" value=8>8</option>
        <option class="bold" value=9>9</option>
        <option class="bold" value=10>10</option>
        <option class="bold" value=11>11</option>
        <option class="bold" value=12>12</option>
    </select>
</p>
<Chart Config="_config"></Chart>

@if (merch == null)
{

}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Category</th>
                <th>Date</th>
                <th>Items found</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in merch)
            {
                <tr>
                    <td>@item.Id.ToString()</td>
                    <td>@item.Category</td>
                    <td>@item.DateAndTime</td>
                    <td>@item.NumberRecordsReturned</td>
                </tr>
            }
        </tbody>
    </table>
    @foreach (var x in totals) 
    {
        x.ToString();
    }
}

@code {

    private IEnumerable<MerchandiseFilter> merch;
    private IEnumerable<string> categories;
    private IEnumerable<Session> sessions;
    private int[] totals;
    private PieConfig _config;

    protected override async void OnInitialized()
    {

        _config = new PieConfig
        {
            Options = new PieOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Merchandise searched by category"
                }
            }
        };

        foreach (string color in new[] { "Red", "Yellow", "Green", "Blue" })
        {
            _config.Data.Labels.Add(color);
        }

        PieDataset<int> dataset = new PieDataset<int>(new[] { 6, 5, 3, 7 })
        {
            BackgroundColor = new[]
            {
            ColorUtil.ColorHexString(255, 99, 132), // Slice 1 aka "Red"
            ColorUtil.ColorHexString(255, 205, 86), // Slice 2 aka "Yellow"
            ColorUtil.ColorHexString(75, 192, 192), // Slice 3 aka "Green"
            ColorUtil.ColorHexString(54, 162, 235), // Slice 4 aka "Blue"
        }
        };

        _config.Data.Datasets.Add(dataset);
        categories = await API.GetDistinctCategories();
        await GetItemsFoundPerCategory();
        StateHasChanged();
    }

    protected async Task GetMerchandise()
    {
        merch = await API.GetMerchandiseFilter();
        StateHasChanged();
    }

    protected async Task GetMerchandiseByCategory(ChangeEventArgs e)
    {
        if (e.Value.ToString() != "All")
            merch = await API.GetMerchandiseByCategory(e.Value.ToString());
        else
            merch = await API.GetMerchandiseFilter();

        StateHasChanged();
    }

    protected async Task GetMerchandiseByMonth(ChangeEventArgs e)
    {
        merch = await API.GetMerchandiseByMonth(Int32.Parse(e.Value.ToString()));
        StateHasChanged();
    }

    protected async Task GetItemsFoundPerCategory()
    {
        var merchandise = from c in merch.AsQueryable()
                          group c by c.Category into avg
                          select new
                          {
                              Category = avg.Key,
                              Total = avg.Sum(x => x.NumberRecordsReturned),
                          };
        int i = 0;
        merchandise = merchandise.OrderBy(x => x.Category);
        foreach (var x in merchandise)
        {
            totals[i] = x.Total;
            i++;
        }
    }
}
