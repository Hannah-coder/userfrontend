@page "/fetchdata"
@using PetShopMetrics.Models
@using System.Text.Json
@using System.Text.Json.Serialization
@using ChartJs.Blazor.PieChart
@using System.Drawing
@inject MonitoringAPIClient API

<h1>Merchandise Filter</h1>

<p>This component demonstrates fetching data from a service.</p>
<p>
    Filter by category
    <select class="bold backgroundLightBlue" @onchange="@GetMerchandiseByCategory">
        <option class="bold" value="0">Select a Category</option>
        <option class="bold" value="All">All</option>
        @if (categories != null)
        {
            @foreach (var c in categories)
            {
                <option class="bold" value=@c>@c</option>
            }
        }
    </select>
</p>
<p>
    Filter by Month
    <select class="bold backgroundLightBlue" @onchange="@GetMerchandiseByMonth">
        <option class="bold" value="0">Select a Month</option>
        <option class="bold" value=1>1</option>
        <option class="bold" value=2>2</option>
        <option class="bold" value=3>3</option>
        <option class="bold" value=4>4</option>
        <option class="bold" value=5>5</option>
        <option class="bold" value=6>6</option>
        <option class="bold" value=7>7</option>
        <option class="bold" value=8>8</option>
        <option class="bold" value=9>9</option>
        <option class="bold" value=10>10</option>
        <option class="bold" value=11>11</option>
        <option class="bold" value=12>12</option>
    </select>
</p>

@if (_config != null)
{
    <Chart Config="_config" @ref="_chart"></Chart>
}

@if (merch == null)
{

}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Category</th>
                <th>Date</th>
                <th>Items found</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in merch)
            {
                <tr>
                    <td>@item.Id.ToString()</td>
                    <td>@item.Category</td>
                    <td>@item.DateAndTime</td>
                    <td>@item.NumberRecordsReturned</td>
                </tr>
            }
        </tbody>
    </table>

}

@code {

    private IEnumerable<MerchandiseFilter> merch;
    private IEnumerable<string> categories;
    private List<string> currentSelection = new();
    private IEnumerable<Session> sessions;
    private int[] totals;
    private PieConfig _config;
    private Chart _chart;
    private PieDataset<int> dataset;

    protected override async void OnInitialized()
    {
        categories = await API.GetDistinctCategories();
        await GetMerchandise();
        totals = GetItemsFoundPerCategory(categories.ToList());
        DrawPieChart(totals, "", categories.ToList());

        StateHasChanged();
    }

    protected void DrawPieChart(int[] data, string title, List<string> labels)
    {
        _config = new PieConfig
        {
            Options = new PieOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Merchandise items returned by searches"
                }
            }
        };

        foreach (string c in labels)
        {
            _config.Data.Labels.Add(c);
        }

        dataset = new PieDataset<int>(data)
        {
            BackgroundColor = new[]
            {
            ColorUtil.ColorHexString(255, 99, 132),
            ColorUtil.ColorHexString(255, 205, 86),
            ColorUtil.ColorHexString(75, 192, 192),
            ColorUtil.ColorHexString(54, 162, 235),
            ColorUtil.ColorHexString(54, 162, 0),
            ColorUtil.ColorHexString(54, 0, 235),
            ColorUtil.ColorHexString(0, 162, 235),
            ColorUtil.ColorHexString(54, 20, 0),
            ColorUtil.ColorHexString(0, 20, 235),
            }
        };

        _config.Data.Datasets.Add(dataset);
    }


    protected async Task GetMerchandise()
    {
        merch = await API.GetMerchandiseFilter();
        totals = GetItemsFoundPerCategory(categories.ToList());
        StateHasChanged();
    }

    protected async Task PopulateGraph()
    {
        string[] colors = new string[currentSelection.Count()];
        for (int i = 0; i < colors.Length; i++)
        {
            colors[i] = ColorUtil.RandomColorString();
        }

        totals = GetItemsFoundPerCategory(currentSelection);

        dataset = new PieDataset<int>(totals)
        {
            BackgroundColor = colors
        };

        _config.Data.Datasets.Clear();
        _config.Data.Datasets.Add(dataset);
        _config.Data.Labels.Clear();

        foreach (string c in currentSelection)
        {
            _config.Data.Labels.Add(c);
        }

        await _chart.Update();
    }

    protected async Task GetMerchandiseByCategory(ChangeEventArgs e)
    {
        if (e.Value.ToString() != "All")
        {
            merch = await API.GetMerchandiseByCategory(e.Value.ToString());
            currentSelection.Clear();
            currentSelection.Add(e.Value.ToString());
            await PopulateGraph();
        }
        else
        {
            merch = await API.GetMerchandiseFilter();
            currentSelection = categories.ToList();
            await PopulateGraph();
        }

        StateHasChanged();
    }


    protected async Task GetMerchandiseByMonth(ChangeEventArgs e)
    {
        merch = await API.GetMerchandiseByMonth(Int32.Parse(e.Value.ToString()));
        StateHasChanged();
    }


    protected int[] GetItemsFoundPerCategory(List<string> list)
    {
        int i = 0;
        int[] sums = new int[list.Count()];

        foreach (var c in list)
        {
            var categoryList = merch.ToList().Where(x => x.Category == c);
            sums[i] = categoryList.Sum(x => x.NumberRecordsReturned);
            i++;
        }

        return sums;
    }


    protected int[] GetCategorySearchCount(List<string> list)
    {
        int i = 0;
        int[] sums = new int[list.Count()];
        foreach (var c in list)
        {
            var categoryList = merch.ToList().Where(x => x.Category == c);
            sums[i] = categoryList.Count();
            i++;
        }

        return sums;
    }

}
